// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// Status - The current status of the instance
type Status string

const (
	StatusActive      Status = "active"
	StatusBooting     Status = "booting"
	StatusUnhealthy   Status = "unhealthy"
	StatusTerminating Status = "terminating"
	StatusTerminated  Status = "terminated"
)

func (e Status) ToPointer() *Status {
	return &e
}
func (e *Status) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "active":
		fallthrough
	case "booting":
		fallthrough
	case "unhealthy":
		fallthrough
	case "terminating":
		fallthrough
	case "terminated":
		*e = Status(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Status: %v", v)
	}
}

// Instance - Virtual machine (VM) in Lambda Cloud
type Instance struct {
	// Unique identifier (ID) of an instance
	ID string `json:"id"`
	// User-provided name for the instance
	Name *string `json:"name,omitempty"`
	// IPv4 address of the instance
	IP *string `json:"ip,omitempty"`
	// Private IPv4 address of the instance
	PrivateIP *string `json:"private_ip,omitempty"`
	// The current status of the instance
	Status Status `json:"status"`
	// Names of the SSH keys allowed to access the instance
	SSHKeyNames []string `json:"ssh_key_names"`
	// Names of the file systems, if any, attached to the instance
	FileSystemNames []string `json:"file_system_names"`
	Region          *Region  `json:"region,omitempty"`
	// Hardware configuration and pricing of an instance type
	InstanceType *InstanceType `json:"instance_type,omitempty"`
	// Hostname assigned to this instance, which resolves to the instance's IP.
	Hostname *string `json:"hostname,omitempty"`
	// Secret token used to log into the jupyter lab server hosted on the instance.
	JupyterToken *string `json:"jupyter_token,omitempty"`
	// URL that opens a jupyter lab notebook on the instance.
	JupyterURL *string `json:"jupyter_url,omitempty"`
	// Whether the instance is reserved.
	IsReserved *bool `json:"is_reserved,omitempty"`
}

func (o *Instance) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Instance) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Instance) GetIP() *string {
	if o == nil {
		return nil
	}
	return o.IP
}

func (o *Instance) GetPrivateIP() *string {
	if o == nil {
		return nil
	}
	return o.PrivateIP
}

func (o *Instance) GetStatus() Status {
	if o == nil {
		return Status("")
	}
	return o.Status
}

func (o *Instance) GetSSHKeyNames() []string {
	if o == nil {
		return []string{}
	}
	return o.SSHKeyNames
}

func (o *Instance) GetFileSystemNames() []string {
	if o == nil {
		return []string{}
	}
	return o.FileSystemNames
}

func (o *Instance) GetRegion() *Region {
	if o == nil {
		return nil
	}
	return o.Region
}

func (o *Instance) GetInstanceType() *InstanceType {
	if o == nil {
		return nil
	}
	return o.InstanceType
}

func (o *Instance) GetHostname() *string {
	if o == nil {
		return nil
	}
	return o.Hostname
}

func (o *Instance) GetJupyterToken() *string {
	if o == nil {
		return nil
	}
	return o.JupyterToken
}

func (o *Instance) GetJupyterURL() *string {
	if o == nil {
		return nil
	}
	return o.JupyterURL
}

func (o *Instance) GetIsReserved() *bool {
	if o == nil {
		return nil
	}
	return o.IsReserved
}
