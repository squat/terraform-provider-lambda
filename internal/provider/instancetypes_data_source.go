// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"context"
	"fmt"
	"github.com/hashicorp/terraform-plugin-framework/datasource"
	"github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/hashicorp/terraform-plugin-framework/types/basetypes"
	tfTypes "github.com/squat/terraform-provider-lambda/internal/provider/types"
	"github.com/squat/terraform-provider-lambda/internal/sdk"
)

// Ensure provider defined types fully satisfy framework interfaces.
var _ datasource.DataSource = &InstanceTypesDataSource{}
var _ datasource.DataSourceWithConfigure = &InstanceTypesDataSource{}

func NewInstanceTypesDataSource() datasource.DataSource {
	return &InstanceTypesDataSource{}
}

// InstanceTypesDataSource is the data source implementation.
type InstanceTypesDataSource struct {
	client *sdk.Lambda
}

// InstanceTypesDataSourceModel describes the data model.
type InstanceTypesDataSourceModel struct {
	Data map[string]tfTypes.Data `tfsdk:"data"`
}

// Metadata returns the data source type name.
func (r *InstanceTypesDataSource) Metadata(ctx context.Context, req datasource.MetadataRequest, resp *datasource.MetadataResponse) {
	resp.TypeName = req.ProviderTypeName + "_instance_types"
}

// Schema defines the schema for the data source.
func (r *InstanceTypesDataSource) Schema(ctx context.Context, req datasource.SchemaRequest, resp *datasource.SchemaResponse) {
	resp.Schema = schema.Schema{
		MarkdownDescription: "InstanceTypes DataSource",

		Attributes: map[string]schema.Attribute{
			"data": schema.MapNestedAttribute{
				Computed: true,
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"instance_type": schema.SingleNestedAttribute{
							Computed: true,
							Attributes: map[string]schema.Attribute{
								"description": schema.StringAttribute{
									Computed:    true,
									Description: `Long name of the instance type`,
								},
								"gpu_description": schema.StringAttribute{
									Computed:    true,
									Description: `Description of the GPU(s) in the instance type`,
								},
								"name": schema.StringAttribute{
									Computed:    true,
									Description: `Name of an instance type`,
								},
								"price_cents_per_hour": schema.Int64Attribute{
									Computed:    true,
									Description: `Price of the instance type, in US cents per hour`,
								},
								"specs": schema.SingleNestedAttribute{
									Computed: true,
									Attributes: map[string]schema.Attribute{
										"gpus": schema.Int64Attribute{
											Computed:    true,
											Description: `Number of GPUs`,
										},
										"memory_gib": schema.Int64Attribute{
											Computed:    true,
											Description: `Amount of RAM, in gibibytes (GiB)`,
										},
										"storage_gib": schema.Int64Attribute{
											Computed:    true,
											Description: `Amount of storage, in gibibytes (GiB).`,
										},
										"vcpus": schema.Int64Attribute{
											Computed:    true,
											Description: `Number of virtual CPUs`,
										},
									},
								},
							},
							Description: `Hardware configuration and pricing of an instance type`,
						},
						"regions_with_capacity_available": schema.ListNestedAttribute{
							Computed: true,
							NestedObject: schema.NestedAttributeObject{
								Attributes: map[string]schema.Attribute{
									"description": schema.StringAttribute{
										Computed:    true,
										Description: `Long name of a region`,
									},
									"name": schema.StringAttribute{
										Computed:    true,
										Description: `Short name of a region`,
									},
								},
							},
							Description: `List of regions, if any, that have this instance type available`,
						},
					},
				},
				Description: `Dict of instance_type_name to instance_type and region availability.`,
			},
		},
	}
}

func (r *InstanceTypesDataSource) Configure(ctx context.Context, req datasource.ConfigureRequest, resp *datasource.ConfigureResponse) {
	// Prevent panic if the provider has not been configured.
	if req.ProviderData == nil {
		return
	}

	client, ok := req.ProviderData.(*sdk.Lambda)

	if !ok {
		resp.Diagnostics.AddError(
			"Unexpected DataSource Configure Type",
			fmt.Sprintf("Expected *sdk.Lambda, got: %T. Please report this issue to the provider developers.", req.ProviderData),
		)

		return
	}

	r.client = client
}

func (r *InstanceTypesDataSource) Read(ctx context.Context, req datasource.ReadRequest, resp *datasource.ReadResponse) {
	var data *InstanceTypesDataSourceModel
	var item types.Object

	resp.Diagnostics.Append(req.Config.Get(ctx, &item)...)
	if resp.Diagnostics.HasError() {
		return
	}

	resp.Diagnostics.Append(item.As(ctx, &data, basetypes.ObjectAsOptions{
		UnhandledNullAsEmpty:    true,
		UnhandledUnknownAsEmpty: true,
	})...)

	if resp.Diagnostics.HasError() {
		return
	}

	res, err := r.client.InstanceTypes(ctx)
	if err != nil {
		resp.Diagnostics.AddError("failure to invoke API", err.Error())
		if res != nil && res.RawResponse != nil {
			resp.Diagnostics.AddError("unexpected http request/response", debugResponse(res.RawResponse))
		}
		return
	}
	if res == nil {
		resp.Diagnostics.AddError("unexpected response from API", fmt.Sprintf("%v", res))
		return
	}
	if res.StatusCode == 404 {
		resp.State.RemoveResource(ctx)
		return
	}
	if res.StatusCode != 200 {
		resp.Diagnostics.AddError(fmt.Sprintf("unexpected response from API. Got an unexpected response code %v", res.StatusCode), debugResponse(res.RawResponse))
		return
	}
	if !(res.InstanceTypes != nil) {
		resp.Diagnostics.AddError("unexpected response from API. Got an unexpected response body", debugResponse(res.RawResponse))
		return
	}
	data.RefreshFromSharedInstanceTypes(res.InstanceTypes)

	// Save updated data into Terraform state
	resp.Diagnostics.Append(resp.State.Set(ctx, &data)...)
}
