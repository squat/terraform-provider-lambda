// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package provider

import (
	"github.com/hashicorp/terraform-plugin-framework/types"
	tfTypes "github.com/squat/terraform-provider-lambda/internal/provider/types"
	"github.com/squat/terraform-provider-lambda/internal/sdk/models/shared"
)

func (r *InstanceTypesDataSourceModel) RefreshFromSharedInstanceTypes(resp *shared.InstanceTypes) {
	if resp != nil {
		if len(resp.Data) > 0 {
			r.Data = make(map[string]tfTypes.Data)
			for dataKey, dataValue := range resp.Data {
				var dataResult tfTypes.Data
				dataResult.InstanceType.Description = types.StringValue(dataValue.InstanceType.Description)
				dataResult.InstanceType.GpuDescription = types.StringValue(dataValue.InstanceType.GpuDescription)
				dataResult.InstanceType.Name = types.StringValue(dataValue.InstanceType.Name)
				dataResult.InstanceType.PriceCentsPerHour = types.Int64Value(dataValue.InstanceType.PriceCentsPerHour)
				dataResult.InstanceType.Specs.Gpus = types.Int64Value(dataValue.InstanceType.Specs.Gpus)
				dataResult.InstanceType.Specs.MemoryGib = types.Int64Value(dataValue.InstanceType.Specs.MemoryGib)
				dataResult.InstanceType.Specs.StorageGib = types.Int64Value(dataValue.InstanceType.Specs.StorageGib)
				dataResult.InstanceType.Specs.Vcpus = types.Int64Value(dataValue.InstanceType.Specs.Vcpus)
				dataResult.RegionsWithCapacityAvailable = []tfTypes.Region{}
				for regionsWithCapacityAvailableCount, regionsWithCapacityAvailableItem := range dataValue.RegionsWithCapacityAvailable {
					var regionsWithCapacityAvailable1 tfTypes.Region
					regionsWithCapacityAvailable1.Description = types.StringValue(regionsWithCapacityAvailableItem.Description)
					regionsWithCapacityAvailable1.Name = types.StringValue(regionsWithCapacityAvailableItem.Name)
					if regionsWithCapacityAvailableCount+1 > len(dataResult.RegionsWithCapacityAvailable) {
						dataResult.RegionsWithCapacityAvailable = append(dataResult.RegionsWithCapacityAvailable, regionsWithCapacityAvailable1)
					} else {
						dataResult.RegionsWithCapacityAvailable[regionsWithCapacityAvailableCount].Description = regionsWithCapacityAvailable1.Description
						dataResult.RegionsWithCapacityAvailable[regionsWithCapacityAvailableCount].Name = regionsWithCapacityAvailable1.Name
					}
				}
				r.Data[dataKey] = dataResult
			}
		}
	}
}
